{% from "base/util.j2" import args, call %}
{% extends "base/header.j2" %}
{% block content %}

{% for f in functions %}
{% if f.args %}
typedef struct {
    {% for arg in f.args %}
    {{ arg.type|unconst }} {{ arg.name }}{% if arg.type == 'GLdouble' %} __attribute__ ((aligned(8))){% endif %};
    {% endfor %}
} ARGS_{{ f.name }};
{% endif %}
typedef struct {
    int index;
    {% if f.args %}
    ARGS_{{ f.name }} args;
    {% endif %}
} PACKED_{{ f.name }};
{% endfor %}

extern const int INDEX_RET_SIZE[];
extern const int INDEX_PACKED_SIZE[];
extern const char *INDEX_NAME[];
extern void glPushCall(void *data);
void glIndexedCall(const packed_call_t *packed, void *ret_v);
void glIndexedPrint(const packed_call_t *packed);

{% for func in functions %}
#define {{ func.name }}_INDEX {{ loop.index }}
#define {{ func.name }}_RETURN {{ func.return }}
#define {{ func.name }}_ARG_NAMES {{ func.args|args(0) }}
#define {{ func.name }}_ARG_EXPAND {{ func.args|args }}
#define {{ func.name }}_PACKED PACKED_{{ func.name }}
{% if func.void %}
#define {{ func.name }}_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define {{ func.name }}_NOT_VOID_WRAP(...) {}
{% else %}
#define {{ func.name }}_VOID_ONLY_WRAP(...) {}
#define {{ func.name }}_NOT_VOID_WRAP(...) { __VA_ARGS__ }
{% endif %}
#define pack_{{ func.name }}({{ func.args|args(0, '_') }}) ({ \
    {{ func.name }}_PACKED *packed_data = malloc(sizeof({{ func.name }}_PACKED)); \
    packed_data->index = {{ func.name }}_INDEX; \
    {% if func.args %}
    {% for arg in func.args %}
    packed_data->args.{{ arg.name }} = ({{ arg.type|unconst }})_{{ arg.name }}; \
    {% endfor %}
    {% endif %}
    (packed_call_t *)packed_data; \
})
#define call_{{ func.name }}(packed, ret_v) do { \
    {% if func.args %}
    PACKED_{{ func.name }} *unpacked = (PACKED_{{ func.name }} *)packed; \
    ARGS_{{ func.name }} *args = (ARGS_{{ func.name }} *)&unpacked->args; \
    {% endif %}
    {% if not func.void %}
    {{ func.return }} *ret = ({{ func.return }} *)ret_v; \
    if (ret != NULL) { \
        *ret = {{ call(func) }}; \
    } else { \
        {{ call(func) }}; \
    } \
    {% else %}
    {{ call(func) }}; \
    {% endif %}
} while(0)
{{ func.return }} {{ func.name }}({{ func.name }}_ARG_EXPAND);
{{ func.return }} stub_{{ func.name }}({{ func.name }}_ARG_EXPAND);
typedef {{ func.return }} (*{{ func.name }}_PTR)({{ func.name }}_ARG_EXPAND);
{% endfor %}

{% endblock %}
